Java Swing: Java Swing is a graphical user interface (GUI) toolkit that lets you build applications 
            for desktop and other platforms using Java

JFRAME: In Java Swing, a JFrame represents a top-level window container, essentially the main 
        window of your application. It's used to create the graphical user interface (GUI) and 
        provides the foundation for building interactive applications

COMPONENTS OF JAVA SWING: 1. JTextField- used to make a text field [ex. t1 = new JTextField(limit)]
                          2. JTextArea- use to make a multi-line area that displays plain text
                                        [ jt = new JTextArea(rows,columns);]
                          3. JTable- is used to display and edit regular two-dimensional tables of cells
                          4. JToggleButton- An implementation of a two-state button. The "JRadioButton"
                                            and "JCheckBox" classes are subclasses of this class
                          5. JLabel- A display area for a short text string or an image, or both.
                                     A label does not react to input events
                          6. JList<E>- A component that displays a list of objects and allows the
                                       user to select one or more items. A separate model, ListModel,
                                       maintains the contents of the list

NOTE: To use the above components we need to make objects of each components and the add them
      [ex.add(t1)]

Q> What is the action interface in Java?
Ans. The ActionListener interface in Java is part of the Swing framework and is used to handle
     events generated by GUI components like buttons, menus, and text fields.

ActionListener: It is a listener interface for receiving action events. The class that is interested
                in processing an action event implements this interface, and the object created with
                that class is registered with a component, using the component's addActionListener
                method. When the action event occurs, that object's "actionPerformed" method is invoked.

ActionEvent: It is a semantic event which indicates that a component-defined action occurred. This
             high-level event is generated by a component (such as a Button) when the component-specific
             action occurs (such as being pressed). The event is passed to every ActionListener object
             that registered to receive such events using the component's addActionListener method.